import String from "string"
import Array from "array"
import List from "list"

import { data } from "./data"

let rows = Array.map(String.explode, String.split("\n", data));

// Row, Col
export enum Type {
  Start(Number, Number),
  Open(Number, Number),
  Tree(Number, Number),
  End
}

let findTrees = (data) => {
  let rowInc = 1;
  let colInc = 3;
  let dataLength = Array.length(rows);

  let init = [Start(0, 0)];

  Array.reduce((acc, row) => {
    let (lastRow, lastCol) = match (List.head(acc)) {
      Some(Start(lastRow, lastCol)) => (lastRow, lastCol),
      Some(Open(lastRow, lastCol)) => (lastRow, lastCol),
      Some(Tree(lastRow, lastCol)) => (lastRow, lastCol),
      Some(End) => fail "Shouldn't be iterating after the end",
      _ => fail "Shouldn't happen"
    };
    let nextRow = lastRow + rowInc;
    let nextCol = lastCol + colInc;

    if (nextRow >= dataLength) {
      [End, ...acc]
    } else {
      let row = rows[nextRow];
      let len = Array.length(row);
      match (row[nextCol % len]) {
        '.' => [Open(nextRow, nextCol), ...acc],
        '#' => [Tree(nextRow, nextCol), ...acc],
        x => fail "Unknown value: " ++ toString(x)
      }
    }
  }, init, data)
}

let countTrees = (data) => {
  List.reduce((trees, val) => {
    match (val) {
      Tree(_, _) => trees + 1,
      _ => trees
    }
  }, 0, data)
}

let results = findTrees(rows)

let trees = countTrees(results)

print(("Trees to avoid:", trees))
