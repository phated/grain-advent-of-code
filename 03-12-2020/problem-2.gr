import String from "string"
import Array from "array"
import List from "list"

import { data } from "./data"

let rows = Array.map(String.explode, String.split("\n", data));

// Row, Col
export enum Type {
  Start(Number, Number),
  Open(Number, Number),
  Tree(Number, Number),
  End
}

let findTrees = (colInc, rowInc, data) => {
  let dataLength = Array.length(rows);

  let init = [Start(0, 0)];

  let next = (nextRow, nextCol) => {
    let row = rows[nextRow];
    let len = Array.length(row);
    match (row[nextCol % len]) {
      '.' => Open(nextRow, nextCol),
      '#' => Tree(nextRow, nextCol),
      x => fail "Unknown value: " ++ toString(x)
    }
  }

  // A little sloppy because it might push multiple End into the list,
  // but it doesn't affect the results
  let endOrNext = (lastRow, lastCol) => {
    let nextRow = lastRow + rowInc;
    let nextCol = lastCol + colInc;
    if (nextRow >= dataLength) {
      End
    } else {
      next(nextRow, nextCol)
    }
  }

  Array.reduce((acc, row) => {
    match (acc) {
      [Start(lastRow, lastCol), ...rest] => [endOrNext(lastRow, lastCol), ...acc],
      [Open(lastRow, lastCol), ...rest] => [endOrNext(lastRow, lastCol), ...acc],
      [Tree(lastRow, lastCol), ...rest] => [endOrNext(lastRow, lastCol), ...acc],
      [End, ...rest] => acc,
      _ => fail "Shouldn't happen"
    }
  }, init, data)
}

let countTrees = (data) => {
  List.reduce((trees, val) => {
    match (val) {
      Tree(_, _) => trees + 1,
      _ => trees
    }
  }, 0, data)
}

let patterns = [
  (1, 1),
  (3, 1),
  (5, 1),
  (7, 1),
  (1, 2),
];

let treesMultiplied = List.reduce((trees, (colInc, rowInc)) => {
  trees * countTrees(findTrees(colInc, rowInc, rows))
}, 1, patterns)

print(("Trees to avoid (multiplied):", treesMultiplied))
