import List from "list"
import String from "string"
import Array from "array"
import Option from "option"

import { data } from "./data"

let seats = List.init(128, (row) => {
  List.init(8, (col) => row * 8 + col)
})

let findSeat = (boardingPass, seats) => {
  let wrappedSeat = Array.reduce((remain, letter) => {
    match (letter) {
      'F' => {
        let (front, back) = List.part(List.length(remain) / 2, remain);
        front
      },
      'B' => {
        let (front, back) = List.part(List.length(remain) / 2, remain);
        back
      },
      'L' when List.length(remain) == 1 => {
        let row = Option.expect("Expected a row", List.head(remain));
        let (left, right) = List.part(List.length(row) / 2, row);
        [left]
      },
      'L' => fail "Looking for `left` without a single row",
      'R' when List.length(remain) == 1 => {
        let row = Option.expect("Expected a row", List.head(remain));
        let (left, right) = List.part(List.length(row) / 2, row);
        [right]
      },
      'R' => fail "Looking for `right` without a single row",
      letter => fail "How did we get here? " ++ toString(letter)
    }
  }, seats, String.explode(boardingPass))

  match (wrappedSeat) {
    [[seat]] => seat,
    _ => fail "Problem getting seat",
  }
}

let seatNumbers = List.flatten(seats);

let takenSeats = Array.reduce((takenSeats, boardingPass) => {
  [findSeat(boardingPass, seats), ...takenSeats]
}, [], String.split("\n", data))

let untakenSeats = List.reject(seat => List.contains(seat, takenSeats), seatNumbers)

let mySeat = List.find((seat) => {
  List.contains(seat - 1, takenSeats) && List.contains(seat + 1, takenSeats)
}, untakenSeats);

print(("My seat number:", Option.unwrap(mySeat)))
