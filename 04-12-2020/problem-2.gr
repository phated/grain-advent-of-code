import String from "string";
import Array from "array";
import List from "list";
import Option from "option";
import Range from "range";
import { naiveParseInt } from "../utils";

import { data } from "./data";

// Abstraction over the fallible parse and Range check
let isBetween = (value, range) => {
  Option.mapWithDefaultFn(
    (num) => Range.inRange(num, range),
    () => false,
    naiveParseInt(value),
  )
}

let getValue = (element) => {
  String.split(":", element)[1]
}

let isValidColor = (value) => {
  let validChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
  Array.every((char) => List.contains(char, validChars), String.explode(value))
}

enum Validations {
  Byr(String, List<(Number, Range.Range)>),
  Iyr(String, List<(Number, Range.Range)>),
  Eyr(String, List<(Number, Range.Range)>),
  Hgt(String, List<(Number, String, Range.Range)>),
  Hcl(String, List<(Number, String)>),
  Ecl(String, List<(Number, String)>),
  Pid(String, List<(Number)>),
  Cid(String),
}

let fields = [
  Byr("byr", [(4, Range.Inclusive(1920, 2002))]),
  Iyr("iyr", [(4, Range.Inclusive(2010, 2020))]),
  Eyr("eyr", [(4, Range.Inclusive(2020, 2030))]),
  Hgt("hgt", [(5, "cm", Range.Inclusive(150, 193)), (4, "in", Range.Inclusive(59, 76))]),
  // TODO: A way to specify a character set
  Hcl("hcl", [(7, "#")]),
  Ecl("ecl", [(3, "amb"), (3, "blu"), (3, "brn"), (3, "gry"), (3, "grn"), (3, "hzl"), (3, "oth")]),
  // TODO: A way to specify all digits
  Pid("pid", [(9)]),
  Cid("cid"),
];

let passports = Array.map((passport) => {
  Array.flatMap((v) => String.split(" ", v), String.split("\n", passport))
}, String.split("\n\n", data));

let validPassports = Array.reduce((valid, passportElements) => {
  let isValid = List.every((field) => {
    let found = Array.find((element) => {
      match (field) {
        Byr(search, validations) when String.contains(search, element) => {
          let value = getValue(element);
          List.some(((length, range)) => {
            String.length(value) == length && isBetween(value, range)
          }, validations)
        },
        Iyr(search, validations) when String.contains(search, element) => {
          let value = getValue(element);
          List.some(((length, range)) => {
            String.length(value) == length && isBetween(value, range)
          }, validations)
        },
        Eyr(search, validations) when String.contains(search, element) => {
          let value = getValue(element);
          List.some(((length, range)) => {
            String.length(value) == length && isBetween(value, range)
          }, validations)
        },
        Hgt(search, validations) when String.contains(search, element) => {
          let value = getValue(element);
          List.some(((length, search, range)) => {
            String.length(value) == length && String.endsWith(search, value) && isBetween(String.slice(0, -2, value), range)
          }, validations)
        },
        Hcl(search, validations) when String.contains(search, element) => {
          let value = getValue(element);
          List.some(((length, startChar)) => {
            String.length(value) == length && String.startsWith(startChar, value) && isValidColor(String.slice(1, length, value))
          }, validations)
        },
        Ecl(search, validations) when String.contains(search, element) => {
          let value = getValue(element);
          List.some(((length, exactMatch)) => {
            String.length(value) == length && value == exactMatch
          }, validations)
        },
        Pid(search, validations) when String.contains(search, element) => {
          let value = getValue(element);
          List.some(((length)) => {
            String.length(value) == length && Option.isSome(naiveParseInt(value))
          }, validations)
        },
        Cid(_) => true,
        _ => false
      }
    }, passportElements)

    Option.isSome(found)
  }, fields);
  if (isValid) {
    valid + 1
  } else {
    valid
  }
}, 0, passports);

print("Valid passports: " ++ toString(validPassports));
