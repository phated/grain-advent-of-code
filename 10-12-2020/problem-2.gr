import Array from "array"
import String from "string"
import Option from "option"
import Map from "map"
import { naiveParseInt } from "../utils"

import { data } from "./data"

let sortInPlace = (arr) => {
  let part = (low, high, arr) => {
    let pivot = arr[high];
    let mut i = low - 1;
    let mut iter = low
    while (iter < high) {
      if (arr[iter] < pivot) {
        i += 1;
        let temp = arr[i];
        arr[i] = arr[iter];
        arr[iter] = temp;
      }
      iter += 1
    }
    let temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    i + 1
  }
  let rec help = (low, high, arr) => {
    if (low < high) {
      let idx = part(low, high, arr);
      help(low, idx - 1, arr);
      help(idx + 1, high, arr);
    }
  }
  let low = 0;
  let high = Array.length(arr) - 1;

  help(low, high, arr);
}

let adapters = Array.map(item => Option.expect("Expected number", naiveParseInt(item)), String.split("\n", data))

sortInPlace(adapters)

// Represents the 0 from the output device
let connections = Map.fromArray([> (0, 1)]);

// Heavily inspired by https://github.com/shahata/adventofcode-solver/blob/master/src/2020/day10.js
Array.forEach((adapter) => {
  let oneLess = Option.unwrapWithDefault(0, Map.get(adapter - 1, connections));
  let twoLess = Option.unwrapWithDefault(0, Map.get(adapter - 2, connections));
  let threeLess = Option.unwrapWithDefault(0, Map.get(adapter - 3, connections));
  Map.set(adapter, oneLess + twoLess + threeLess, connections)
}, adapters)

let len = Array.length(adapters);
let lastAdapter = adapters[len - 1];
let possibleConnections = Option.expect("Expected total connections", Map.get(lastAdapter, connections));

print(("Total possible connections", possibleConnections))
